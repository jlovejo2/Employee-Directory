{"version":3,"sources":["components/container/index.js","components/row/index.js","components/col/index.js","pages/Home.js","utils/API.js","components/unorderedList/index.js","components/searchTable/index.js","components/tableRow/index.js","pages/Employees.js","components/navbar/index.js","components/footer/index.js","components/wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Row","center","Col","size","split","map","join","Home","axios","get","unorderderList","bootStrapList","searchTable","class","value","onChange","selectChange","selected","type","filterFunc","tableRow","scope","num","firstName","lastName","src","image","alt","address","email","years","Employees","loadEmployees","API","then","res","console","log","employeeArr","data","results","employeeObj","name","first","last","picture","medium","location","street","number","city","state","yearsWithCompany","registered","age","setState","employeeResArr","filteredEmployees","ascKey","handleChange","bind","this","event","sortKey","employeeData","reverse","sort","employee1","employee2","localeCompare","filterKey","filterEmployees","filter","employee","target","e","onFilter","onClick","onSortString","onSortNumber","index","key","Component","Navbar","to","window","pathname","path","Footer","Wrapper","App","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3c89296.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    //Will return className row-fluid if  props.fluid is true and row if its false\r\n  return <div className={`row${props.fluid ? '-fluid' : ''} ${props.center ? 'text-center' : ''}`} {...props} />;\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size} {...props} />;\r\n}\r\n\r\nexport default Col;\r\n","import React from 'react';\r\nimport Container from \"../components/container\";\r\nimport Row from \"../components/row\";\r\nimport Col from \"../components/col\";\r\n\r\n\r\nfunction Home () {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row center='true'>\r\n                    <Col size='lg-12'>\r\n                    <h1>This is the Home Page</h1>\r\n                    <p>Welcome Welcome Welcome</p>\r\n                   \r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import axios from 'axios';\r\n\r\nexport default {\r\n    //This code makes the call to the api for the response object\r\n    getEmployees: function() {\r\n        return axios.get('https://randomuser.me/api/?results=50&nat=us')\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\n\r\nfunction unorderderList(props) {\r\n    // console.log(props.key);\r\n    return (\r\n        <ul className={props.bootStrapList ? 'list-group' : ''}>\r\n            <li>Click on column headers \"full name\" and \"Years With Company\" to flip employees from ascending to descending</li>\r\n            <li>The search bar below and pulldown allow for the employees to be filtered by the selected criteria in dropdown</li>\r\n            <li></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default unorderderList;","import React from 'react';\r\n\r\n\r\nfunction searchTable(props) {\r\n    // console.log(props.key);\r\n    return (\r\n        <div class=\"input-group mb-3\">\r\n\r\n        <select class=\"custom-select-sm\" value={props.value} onChange={props.selectChange}>\r\n            <option selected value=\"firstName\">First Name</option>\r\n            <option value=\"lastName\">Last Name</option>\r\n            <option value=\"yearsWithCompany\">Years With Company</option>\r\n        </select>\r\n        <input type=\"text\" class=\"form-control\" onChange={props.filterFunc} ></input>\r\n\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default searchTable;","import React from 'react';\r\n\r\n\r\nfunction tableRow(props) {\r\n    // console.log(props.key);\r\n    return (\r\n        <tr>\r\n            <th scope={props.scope}>{props.num + 1}</th>\r\n            <td>{props.firstName} {props.lastName}</td>\r\n            <td>\r\n                <img src={props.image} alt='thumbnail'></img>\r\n            </td>\r\n            <td>{props.address}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.years}</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default tableRow;","import React, { Component } from \"react\";\r\nimport API from '../utils/API';\r\nimport Container from \"../components/container\";\r\nimport Row from \"../components/row\";\r\nimport Col from \"../components/col\";\r\n// import Table from '../components/table';\r\nimport UnorderedList from '../components/unorderedList';\r\nimport SearchTable from '../components/searchTable'\r\nimport TableRow from '../components/tableRow';\r\n\r\nclass Employees extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //this is the state variable that api response is set to\r\n            employeeResArr: [],\r\n            //this is the state variable that filtered results is set to\r\n            filteredEmployees: [],\r\n            value: 'firstName',\r\n            ascKey: false,\r\n            };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    //This calls the function that loads the employees from the api call when the page mounts\r\n    componentDidMount() {\r\n        this.loadEmployees()\r\n    };\r\n\r\n    //Ths function sorts the table by what is in the clicked on column.\r\n    //The first parameter is the event associated with the click (onClick is used)\r\n    //The second parameter is the key of the values that are rendered into that column from the state employeeresArr\r\n    //so for clicking on name columm sortKey deliver is 'firstName' so it sorts by first name of employee\r\n    onSortString(event, sortKey, ascKey) {\r\n\r\n        console.log('sorting string')\r\n        const employeeData = this.state.employeeResArr\r\n\r\n            if(!ascKey) {\r\n            \r\n            employeeData.sort((employee1, employee2) => {\r\n                return employee1[sortKey].localeCompare(employee2[sortKey])\r\n            })\r\n        } else {\r\n            console.log('reverse');\r\n            employeeData.reverse()\r\n        }\r\n\r\n        this.setState({ ascKey: !ascKey });\r\n        this.setState({ employeeData })\r\n    }\r\n\r\n    onSortNumber(event, sortKey, ascKey) {\r\n        \r\n        console.log('sorting number')\r\n        const employeeData = this.state.employeeResArr\r\n\r\n            if(!ascKey) {\r\n            \r\n            employeeData.sort((employee1, employee2) => {\r\n                return employee1[sortKey] - employee2[sortKey]\r\n            })\r\n        } else {\r\n            console.log('reverse');\r\n            employeeData.sort((employee1, employee2) => { \r\n                return employee2[sortKey] - employee1[sortKey]\r\n             })\r\n        }\r\n\r\n        this.setState({ ascKey: !ascKey });\r\n        this.setState({ employeeData })\r\n    }\r\n\r\n\r\n    //This function uses three parameters.  The first is the event it is attached to this was mainly used for console.log and troubleshooting\r\n    //The second parameter is the string that the employee table is being filtered against.  This is the input from the textbox\r\n    //The third is the value that was selected in the dropdown menu.  This directs the code to the correct if-else block.\r\n    onFilter(event, filterKey, value) {\r\n        console.log('filtering')\r\n       \r\n        if (value === \"firstName\") {\r\n            const employeeData = this.state.employeeResArr\r\n            const filterEmployees = employeeData.filter((employee) => employee.firstName === filterKey)\r\n            this.setState({ filteredEmployees: filterEmployees })\r\n        } else if (value === 'lastName') {\r\n            const employeeData = this.state.employeeResArr\r\n            const filterEmployees = employeeData.filter((employee) => employee.lastName === filterKey)\r\n            this.setState({ filteredEmployees: filterEmployees })\r\n        } else if (value === 'yearsWithCompany') {\r\n            const employeeData = this.state.employeeResArr\r\n            //The \"==\" was done intentionally in below lines of code.  It is because user is typing in the info in an input box which is coming back as a string\r\n            //While respone from axios call for registered age is an integer\r\n            const filterEmployees = employeeData.filter((employee) => employee.yearsWithCompany == filterKey)\r\n            this.setState({ filteredEmployees: filterEmployees })\r\n        }\r\n    }\r\n\r\n    //This function interacts with the Api\r\n    //It goes to the API file that is imported at top of page and then runs through that response object taking only the values needed and mapping them into a new array of employee objects\r\n    //That new arr of employee objects is then set to the filteredEmployees state variable\r\n    loadEmployees = () => {\r\n        API.getEmployees()\r\n            .then(res => {\r\n                console.log('employees loaded');\r\n\r\n                const employeeArr = res.data.results.map((employeeObj) => {\r\n                    const obj = {\r\n                        firstName: employeeObj.name.first,\r\n                        lastName: employeeObj.name.last,\r\n                        image: employeeObj.picture.medium,\r\n                        email: employeeObj.email,\r\n                        address: employeeObj.location.street.number + \" \" + employeeObj.location.street.name + \" \" + employeeObj.location.city + \", \" + employeeObj.location.state,\r\n                        yearsWithCompany: employeeObj.registered.age\r\n                    }\r\n\r\n                    return obj\r\n                });\r\n\r\n                this.setState({ employeeResArr: employeeArr });\r\n                this.setState({ filteredEmployees: employeeArr });\r\n\r\n            })\r\n    };\r\n\r\n    //This function is used in the <Select/> to add the value the user select to the state variable\r\n    handleChange(event) {\r\n        console.log('handle change');\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    //This function is necessary to React.  It looks for it and uses it to render the jsx as html to the page\r\n    render() {\r\n        console.log('rendering');  \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row center='true'>\r\n                        <Col size='lg-12'>\r\n                            <br></br>\r\n                            <p>\r\n                                <h3>Welcome to the Employees Page!!</h3>\r\n                                <strong>There are a handful of options for interacting with this table</strong>\r\n                                <UnorderedList \r\n                                    bootStrapList={true}\r\n                                />\r\n                            </p>\r\n                            <br></br>\r\n                            <SearchTable\r\n                                value={this.state.value}\r\n                                selectChange={this.handleChange}\r\n                                filterFunc={e => this.onFilter(e, e.target.value, this.state.value)}\r\n                            />\r\n                            <br></br>\r\n                            <table className=\"table\">\r\n                                <thead className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th scope='col'>#</th>\r\n                                        <th scope='col' onClick={e => this.onSortString(e, 'firstName', this.state.ascKey)}>Full Name</th>\r\n                                        <th scope='col'>Picture</th>\r\n                                        <th scope='col'>Address</th>\r\n                                        <th scope='col'>Email</th>\r\n                                        <th scope='col' onClick={e => this.onSortNumber(e, 'yearsWithCompany', this.state.ascKey)}>Years With Company</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.state.filteredEmployees.map((value, index) => {\r\n                                            return <TableRow\r\n                                                scope=\"row\"\r\n                                                key={index}\r\n                                                num={index}\r\n                                                firstName={value.firstName}\r\n                                                lastName={value.lastName}\r\n                                                image={value.image}\r\n                                                email={value.email}\r\n                                                address={value.address}\r\n                                                years={value.yearsWithCompany}\r\n                                            />\r\n                                        })\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default Employees;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\r\n            <Link className='navbar-brand' to='/'>\r\n                Home Page\r\n            </Link>\r\n            <div>\r\n                <ul className='navbar-nav'>\r\n                    <li className='nav-item'>\r\n                        <Link to='/' className={window.location.pathname === '/' || window.location.path === '/about' ? 'nav-link active' : 'nav-link'} >\r\n                            About\r\n                        </Link>\r\n                    </li>\r\n                    <li className='nav-item'>\r\n                        <Link to='/employee' className={window.location.pathname === '/employee' ? 'nav-link active' : 'nav-link'} >\r\n                            Employees\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className='footer text-center'>\r\n            <span>Employee Directory 2020</span>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction Wrapper(props) {\r\n    return <main className='wrapper'{...props}/>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Employees from './pages/Employees'\nimport Navbar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport Wrapper from \"./components/wrapper\";\n\n\n//This is the code for the App.js which renders the given page based on the components delivered in the <Route/> in the below Navbar\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Wrapper>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/home\" component={Home} />\n          <Route exact path=\"/employee\" component={Employees} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}