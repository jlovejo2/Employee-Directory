{"version":3,"sources":["components/container/index.js","components/row/index.js","components/col/index.js","pages/home.js","utils/API.js","components/unorderedList/index.js","components/searchTable/index.js","components/tableRow/index.js","pages/employees.js","components/navbar/index.js","components/footer/index.js","components/wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Row","center","Col","size","split","map","join","Home","axios","get","unorderderList","bootStrapList","searchTable","value","onChange","selectChange","defaultValue","type","filterFunc","tableRow","scope","num","firstName","lastName","src","image","alt","address","email","years","Employees","loadEmployees","console","log","API","then","res","employeeArr","data","results","employeeObj","name","first","last","picture","medium","location","street","number","city","state","yearsWithCompany","registered","age","setState","employeeResArr","filteredEmployees","ascKey","handleChange","bind","this","event","sortKey","employeeData","reverse","sort","employee1","employee2","localeCompare","filterKey","filterEmployees","filter","employee","target","e","onFilter","onClick","onSortString","onSortNumber","index","key","Component","Navbar","to","window","pathname","path","Footer","Wrapper","App","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07685b8a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n    //Will return className row-fluid if  props.fluid is true and row if its false\n  return <div className={`row${props.fluid ? '-fluid' : ''} ${props.center ? 'text-center' : ''}`} {...props} />;\n}\n\nexport default Row;","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from 'react';\nimport Container from \"../components/container\";\nimport Row from \"../components/row\";\nimport Col from \"../components/col\";\n\n\nfunction Home () {\n    return (\n        <div>\n            <Container>\n                <Row center='true'>\n                    <Col size='lg-12'>\n                    <h1>This is the Home Page</h1>\n                    <p>Welcome Welcome Welcome</p>\n                   \n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default Home;","import axios from 'axios';\n\nexport default {\n    //This code makes the call to the api for the response object\n    getEmployees: function() {\n        return axios.get('https://randomuser.me/api/?results=50&nat=us')\n    }\n\n}","import React from 'react';\nimport './style.css';\n\n\nfunction unorderderList(props) {\n    // console.log(props.key);\n    return (\n        <ul className={props.bootStrapList ? 'list-group' : ''}>\n            <li>Click on column headers \"full name\" and \"Years With Company\" to flip employees from ascending to descending</li>\n            <li>The search bar below and pulldown allow for the employees to be filtered by the selected criteria in dropdown</li>\n            <li>To get all the employees back select the All Employees option in dropdown and type any letter</li>\n        </ul>\n    )\n}\n\nexport default unorderderList;","import React from 'react';\n\n\nfunction searchTable(props) {\n    // console.log(props.key);\n    return (\n        <div className=\"input-group mb-3\">\n\n            <select className=\"custom-select-sm\" value={props.value} onChange={props.selectChange}>\n                <option defaultValue=\"allEmployees\">All Employees</option>\n                <option value=\"firstName\">First Name</option>\n                <option value=\"lastName\">Last Name</option>\n                <option value=\"yearsWithCompany\">Years With Company</option>\n            </select>\n            <input type=\"text\" className=\"form-control\" onChange={props.filterFunc} ></input>\n\n        </div>\n    )\n\n}\n\nexport default searchTable;","import React from 'react';\n\n\nfunction tableRow(props) {\n    // console.log(props.key);\n    return (\n        <tr>\n            <th scope={props.scope}>{props.num + 1}</th>\n            <td>{props.firstName} {props.lastName}</td>\n            <td>\n                <img src={props.image} alt='thumbnail'></img>\n            </td>\n            <td>{props.address}</td>\n            <td>{props.email}</td>\n            <td>{props.years}</td>\n        </tr>\n    )\n\n}\n\nexport default tableRow;","import React, { Component } from \"react\";\nimport API from '../utils/API';\nimport Container from \"../components/container\";\nimport Row from \"../components/row\";\nimport Col from \"../components/col\";\n// import Table from '../components/table';\nimport UnorderedList from '../components/unorderedList';\nimport SearchTable from '../components/searchTable'\nimport TableRow from '../components/tableRow';\n\nclass Employees extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //this is the state variable that api response is set to\n            employeeResArr: [],\n            //this is the state variable that filtered results is set to\n            filteredEmployees: [],\n            value: 'firstName',\n            ascKey: false,\n            };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    //This calls the function that loads the employees from the api call when the page mounts\n    componentDidMount() {\n        this.loadEmployees()\n    };\n\n    //Ths function sorts the table by what is in the clicked on column.\n    //The first parameter is the event associated with the click (onClick is used)\n    //The second parameter is the key of the values that are rendered into that column from the state employeeresArr\n    //so for clicking on name columm sortKey deliver is 'firstName' so it sorts by first name of employee\n    onSortString(event, sortKey, ascKey) {\n\n        console.log('sorting string')\n        const employeeData = this.state.employeeResArr\n\n            if(!ascKey) {\n            \n            employeeData.sort((employee1, employee2) => {\n                return employee1[sortKey].localeCompare(employee2[sortKey])\n            })\n        } else {\n            console.log('reverse');\n            employeeData.reverse()\n        }\n\n        this.setState({ ascKey: !ascKey });\n        this.setState({ employeeData })\n    }\n\n    onSortNumber(event, sortKey, ascKey) {\n        \n        console.log('sorting number')\n        const employeeData = this.state.employeeResArr\n\n            if(!ascKey) {\n            \n            employeeData.sort((employee1, employee2) => {\n                return employee1[sortKey] - employee2[sortKey]\n            })\n        } else {\n            console.log('reverse');\n            employeeData.sort((employee1, employee2) => { \n                return employee2[sortKey] - employee1[sortKey]\n             })\n        }\n\n        this.setState({ ascKey: !ascKey });\n        this.setState({ employeeData })\n    }\n\n\n    //This function uses three parameters.  The first is the event it is attached to this was mainly used for console.log and troubleshooting\n    //The second parameter is the string that the employee table is being filtered against.  This is the input from the textbox\n    //The third is the value that was selected in the dropdown menu.  This directs the code to the correct if-else block.\n    onFilter(event, filterKey, value) {\n        console.log('filtering')\n       \n        if (value === \"firstName\") {\n            const employeeData = this.state.employeeResArr\n            const filterEmployees = employeeData.filter((employee) => employee.firstName === filterKey)\n            this.setState({ filteredEmployees: filterEmployees })\n        } else if (value === 'lastName') {\n            const employeeData = this.state.employeeResArr\n            const filterEmployees = employeeData.filter((employee) => employee.lastName === filterKey)\n            this.setState({ filteredEmployees: filterEmployees })\n        } else if (value === 'yearsWithCompany') {\n            const employeeData = this.state.employeeResArr\n            //The \"==\" was done intentionally in below lines of code.  It is because user is typing in the info in an input box which is coming back as a string\n            //While respone from axios call for registered age is an integer\n            // eslint-disable-next-line\n            const filterEmployees = employeeData.filter((employee) => employee.yearsWithCompany == filterKey)\n            this.setState({ filteredEmployees: filterEmployees })\n        } else {\n            this.setState({ filteredEmployees: this.state.employeeResArr})\n            // this.render()\n        }\n    }\n\n    //This function interacts with the Api\n    //It goes to the API file that is imported at top of page and then runs through that response object taking only the values needed and mapping them into a new array of employee objects\n    //That new arr of employee objects is then set to the filteredEmployees state variable\n    loadEmployees = () => {\n        console.log('before API');\n        API.getEmployees()\n            .then(res => {\n                console.log('employees loaded');\n\n                const employeeArr = res.data.results.map((employeeObj) => {\n                    const obj = {\n                        firstName: employeeObj.name.first,\n                        lastName: employeeObj.name.last,\n                        image: employeeObj.picture.medium,\n                        email: employeeObj.email,\n                        address: employeeObj.location.street.number + \" \" + employeeObj.location.street.name + \" \" + employeeObj.location.city + \", \" + employeeObj.location.state,\n                        yearsWithCompany: employeeObj.registered.age\n                    }\n\n                    return obj\n                });\n\n                this.setState({ employeeResArr: employeeArr });\n                this.setState({ filteredEmployees: employeeArr });\n\n            })\n    };\n\n    //This function is used in the <Select/> to add the value the user select to the state variable\n    handleChange(event) {\n        console.log('handle change');\n        this.setState({ value: event.target.value });\n    }\n\n    //This function is necessary to React.  It looks for it and uses it to render the jsx as html to the page\n    render() {\n        console.log('rendering');  \n        return (\n            <div>\n                <Container>\n                    <Row center='true'>\n                        <Col size='lg-12'>\n                            <br></br>\n                                <h3>Welcome to the Employees Page!!</h3>\n                                <strong>There are a handful of options for interacting with this table</strong>\n                                <UnorderedList \n                                    bootStrapList={true}\n                                />\n                            <br></br>\n                            <SearchTable\n                                value={this.state.value}\n                                selectChange={this.handleChange}\n                                filterFunc={e => this.onFilter(e, e.target.value, this.state.value)}\n                            />\n                            <br></br>\n                            <table className=\"table\">\n                                <thead className=\"thead-dark\">\n                                    <tr>\n                                        <th scope='col'>#</th>\n                                        <th scope='col' onClick={e => this.onSortString(e, 'firstName', this.state.ascKey)}>Full Name</th>\n                                        <th scope='col'>Picture</th>\n                                        <th scope='col'>Address</th>\n                                        <th scope='col'>Email</th>\n                                        <th scope='col' onClick={e => this.onSortNumber(e, 'yearsWithCompany', this.state.ascKey)}>Years With Company</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.filteredEmployees.map((value, index) => {\n                                            return <TableRow\n                                                scope=\"row\"\n                                                key={index}\n                                                num={index}\n                                                firstName={value.firstName}\n                                                lastName={value.lastName}\n                                                image={value.image}\n                                                email={value.email}\n                                                address={value.address}\n                                                years={value.yearsWithCompany}\n                                            />\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    };\n}\n\n\nexport default Employees;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar() {\n    return (\n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n            <Link className='navbar-brand' to='/'>\n                Home Page\n            </Link>\n            <div>\n                <ul className='navbar-nav'>\n                    <li className='nav-item'>\n                        <Link to='/' className={window.location.pathname === '/' || window.location.path === '/about' ? 'nav-link active' : 'nav-link'} >\n                            About\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link to='/employee' className={window.location.pathname === '/employee' ? 'nav-link active' : 'nav-link'} >\n                            Employees\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\n\nfunction Footer() {\n    return (\n        <footer className='footer text-center'>\n            <span>Employee Directory 2020</span>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\n\nfunction Wrapper(props) {\n    return <main className='wrapper'{...props}/>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/home\";\nimport Employees from './pages/employees'\nimport Navbar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport Wrapper from \"./components/wrapper\";\n\n\n//This is the code for the App.js which renders the given page based on the components delivered in the <Route/> in the below Navbar\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Wrapper>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/home\" component={Home} />\n          <Route exact path=\"/employee\" component={Employees} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}